input {
    stdin {
      codec => multiline {
        pattern => "\\$"
        what => "next"
      }
    }
}

filter {
    if ([message] =~ "^TESTRUN_DATA") {
        grok {
            match => { "message" => "TESTRUN_DATA ##%{DATA:testDataJson}## \\\nRUN\t%{DATA:simulationClass:keyword}\t%{DATA:defaultSimulationId:keyword}\t%{INT:start}\t%{DATA:description:text}\t3.0.3" }
            keep_empty_captures => false
            add_field => { "type" => "RUN" }
        }
        json {
          source => "testDataJson"
        }
        mutate {
            remove_field => ["host", "path"]
        }
        date {
            match => [ "start", "UNIX_MS" ]
        }
    }
    if ([message] =~ "^USER") {
        grok {
            match => { "message" => "USER\t%{DATA:scenario:keyword}\t%{DATA:userId:keyword}\t%{WORD:event:keyword}\t%{INT:start}\t%{INT:end}" }
            keep_empty_captures => false
            add_field => { "type" => "USER" }
        }
        if ([event] == "START") {
            drop { }
        }
        mutate {
            remove_field => ["host", "path"]
        }
        mutate {
            convert => {
              "start" => "integer"
              "end" => "integer"
            }
        }
        if [end] {
	        ruby {
	            code => "duration = event.get('end') - event.get('start')
	            		 event.set('duration', duration)"
	        }
        }
        date {
            match => ["start", "UNIX_MS"]
        }
        date {
            match => ["end", "UNIX_MS"]
            target => "end"
        }
    }
    if ([message] =~ "^GROUP") {
        drop { }
    }
    if ([message] =~ "^REQUEST") {
        grok {
            match => { "message" => "REQUEST\t%{INT:userID}\t%{DATA:group}\t%{DATA:scenario_name}\t%{INT:start}\t%{INT:end}\t%{WORD:okay}\t%{DATA:msg}" }
            keep_empty_captures => true
            add_field => { "type" => "REQUEST" }
        }
        mutate {
            remove_field => ["host", "path"]
        }
        mutate {
            convert => {
              "start" => "integer"
              "end" => "integer"
            }
        }
        if [end] {
            ruby {
                code => "duration = event.get('end') - event.get('start')
                		 event.set('duration', duration)"
            }
        }
        date {
            match => [ "start", "UNIX_MS" ]
        }
        date {
            match => [ "end", "UNIX_MS" ]
            target => "end"
        }
    }
}

output {
     elasticsearch {
        hosts => [ "${ELASTICSEARCH_URL}" ]
        index => "${INDEX_NAME}"
        codec => "json"
        timeout => 60
    }
}
